TestCase subclass: #NodeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!NodeTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 10:34'!test01AperturaYCierreTagVacio	"comment stating purpose of message"| ws node |ws := WriteStream on: String new.node := HtmlNode new.node openTag: ws.node closeTag: ws.self assert: ws contents = '<html></html>' description: 'No se pudo generar el tag html vacío'! !TestCase subclass: #DefinitionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:11'!test08GeneracionConNodoNuevoAnidamientoNoPermitido	"Creación de un nodo nuevo sin restricciones"Html defNode: #Bajada  canHave: #(H1 H2).self should: [Html build: [ :html | html body bajada p: 'Bajada']] raise: TestResult error description: 'No se debe permitir que se aniden nodos no permitidos (p en bajada)'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:10'!test07GeneracionConNodoNuevoInline	"Creación de un nodo nuevo sin restricciones"Html defNode: #Nota canHave: #(H1 H2).self assert: (Html build: [ :html | html body nota h1: 'Titulo']) = '<!!DOCTYPE html><html><body><nota><h1>Titulo</h1></nota></body></html>' description: 'Se debe poder anidar los nodos permitidos (h1 en nota)'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 16:42'!test01CreacionDeNodoBasico	"Creación de un nodo nuevo sin restricciones"| clase |Html defNode: #Alguno.clase := Smalltalk classNamed: 'AlgunoNode'.self assert: clase isNotNil description: 'Tiene que haberse creado la clase para el nodo nuevo.'.self assert: clase tagName = 'alguno'.self assert: clase canHave isEmpty description: 'Es una nodo sin restricciones.'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:59'!test06GeneracionConNodoNuevo	"Creación de un nodo nuevo sin restricciones"Html defNode: #Articulo  canHave: #(H1 H2).self assert: (Html build: [ :html | html articulo: [html h2:'Titulo']]) = '<!!DOCTYPE html><html><articulo><h2>Titulo</h2></articulo></html>' description: 'No se permite nodo anidado permitido (h2) con bloque'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:22'!test02CreacionDeNodoConRestricciones	"Creación de un nodo nuevo sin restricciones"| clase |Html defNode: #Restringido canHave: #(Head Body).clase := Smalltalk classNamed: 'RestringidoNode'.self assert: clase isNotNil description: 'Tiene que haberse creado la clase para el nodo nuevo.'.self assert: clase tagName = 'restringido'.self assert: clase canHave = #(Head Body) description: 'Se debe tener registrado cuáles son los nodos que permite'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:53'!test05GeneracionConNodoNuevoBasicoConAppend	"Generación con un nuevo nodo sin restricciones, con anidamiento"Html defNode: #Basico2.self assert: (Html build: [ :html | html body basico2 append:'hola']) = '<!!DOCTYPE html><html><body><basico2>hola</basico2></body></html>'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:35'!test03GeneracionConNodoNuevoBasico	"Creación de un nodo nuevo sin restricciones"Html defNode: #Basico.self assert: (Html build: [ :html | html basico: []]) = '<!!DOCTYPE html><html><basico></basico></html>' description: 'Fallo en generación con bloque'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:49'!test04GeneracionConNodoNuevoBasicoNoSePermiteAnidamiento	"Creación de un nodo nuevo sin restricciones"Html defNode: #Basico.self should: [Html build: [ :html | html basico p: []]] raise: TestResult error  description: 'El nodo no tiene subnodos definidos, así que no puede permitir nada que no sea texto plano.'.! !TestCase subclass: #ValidacionesTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:13'!test06AnidamientoNodosInlineNoValido	"Prueba de anidamiento inline permitido"self should: [Html build: [ :html |				  html head body: 'Lorem ipsum'				]] raise: TestResult error description: 'No se debe permitir anidar Body en Head.'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 11:19'!test01AnidamientoNodosAceptado	"comment stating purpose of message"| builder |builder := Html new.builder pushChildNode: (HtmlNode new: builder).builder pushChildNode: (HeadNode new: builder).builder popNode.builder pushChildNode: (BodyNode new: builder).builder popNode.builder popNode.builder contents.self assert: builder contents = '<!!DOCTYPE html><html><head></head><body></body></html>'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:13'!test05AnidamientoNodosInlineTexto	"Prueba de anidamiento inline permitido"self assert: (Html build: [ :html |				  html head title: 'Lorem ipsum']) = '<!!DOCTYPE html><html><head><title>Lorem ipsum</title></head></html>'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:13'!test04AnidamientoNodosInlineAppend	"Prueba de anidamiento inline permitido"self assert: (Html build: [ :html |              html head title append: 'Lorem ipsum']) = '<!!DOCTYPE html><html><head><title>Lorem ipsum</title></head></html>'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 11:36'!test03AnidamientoNodosInline	"Prueba de anidamiento inline permitido"self assert: (Html build: [ :html |				   html body: [                     html h1: []				   ]]) = '<!!DOCTYPE html><html><body><h1></h1></body></html>'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:51'!test02AnidamientoNodosNoAceptado	"Prueba de anidamiento no permitido"| builder |builder := Html new.builder pushChildNode: (HtmlNode new: builder).builder pushChildNode: (HeadNode new: builder).self should: [builder pushChildNode: (BodyNode new: builder)] raise: TestResult error description: 'Debe fallar si se quiere anidar un tag no permitido, como Body dentro de Head'.! !TestCase subclass: #GeneralTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!GeneralTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 10:29'!test01GeneracionCompleta	"Generación completa de un documento"	| salida |salida := (Html build: [ :html| 	 html body: [    html h1: 'Título'.    html p: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.'.    html h2: 'Subtítulo'.    html p: [      html append: 'Duis aute irure dolor in reprehenderit in voluptate '.      html b: 'velit esse cillum dolore'.      html append: ' eu fugiat nulla pariatur.'    ]  ]]).self assert: salida = '<!!DOCTYPE html><html><body><h1>Título</h1><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p><h2>Subtítulo</h2><p>Duis aute irure dolor in reprehenderit in voluptate <b>velit esse cillum dolore</b> eu fugiat nulla pariatur.</p></body></html>'.! !Object subclass: #Html	instanceVariableNames: 'stack'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!Html commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 20:05'!contents	"comment stating purpose of message"	|t buffer|		buffer := WriteStream on: (String new).	buffer nextPutAll: '<!!DOCTYPE html>'.		stack size = 0 ifTrue: [ ^  buffer contents ].	[ stack size>1 ] whileTrue: [ stack pop].		t := stack top. 	t writeTo:  buffer.	   ^ 	buffer contents.! !!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 18:50'!initialize	"comment stating purpose of message"	| |stack := Stack new.! !!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/14/2015 11:54'!doesNotUnderstand: aMessage 	|t exists chl |	     t := aMessage selector asLegalSelector  asCamelCase,'Node*' .      exists := XmlNode selectSubclasses: [ :c |		t match: (c className) . 		].	chl := exists anyOne new: self.	aMessage numArgs > 0 ifTrue:[			aMessage setSelector: #setup:.			 aMessage sendTo: chl.	]."	aMessage numArgs = 0 ifTrue:["		self pushChildNode: chl.	"	]."	Transcript show:  'does not html object ' ,  chl asString.	 ^chl.	! !!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/14/2015 12:33'!pushChildNode: n	"comment stating purpose of message"		|t|		n ifNil: [ 			^ self 		].	stack size > 0 ifTrue:[ 			t	:=	stack top.			t ifNotNil: [ 							t addChild: n.							 ].		].	stack push: n! !!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 20:01'!popNode	"comment stating purpose of message"	| |	 	stack size > 1 ifTrue: [ 		stack pop.	].! !!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/14/2015 10:35'!append:  inner	| node  |	Transcript show: (' append ', self asString , ' : ', inner) .	node := 	TxtNode new. 	node setTxt: inner.	self pushChildNode: node.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Html class	instanceVariableNames: ''!!Html class methodsFor: 'construction' stamp: 'PLPPOLINOMIO 11/13/2015 16:59'!defNode: smb canHave: tags	""	|cls|cls :=	 self defNode: smb.	cls canHave: tags.	^cls. ! !!Html class methodsFor: 'construction' stamp: 'PLPPOLINOMIO 11/14/2015 11:46'!build: b	"comment stating purpose of message"	|html htmlN val|	html := self new.	htmlN := HtmlNode new: html.	html pushChildNode: htmlN.   val := b value: html.	Transcript show: 'build ', val asString.	"htmlN addChild:val."	^ html contents.! !!Html class methodsFor: 'construction' stamp: 'PLPPOLINOMIO 11/13/2015 20:24'!defNode: smb.^ XmlNode subclass: ((smb,'Node') asCamelCase ) instanceVariableNames: ''	classVariableNames: 'allowed' 	category: 'PLP-GOTO'. ! !TestCase subclass: #DocumentTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!DocumentTest methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/12/2015 20:50'!test04GeneracionConBloque	"Generación solo-texto en el documento"	| salida |salida := Html build: [ :html | html body: [html b: 'Negrita' ] ].self assert: salida = '<!!DOCTYPE html><html><body><b>Negrita</b></body></html>'.	! !!DocumentTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:27'!test02GeneracionSoloTexto	"Generación solo-texto en el documento"	| salida |salida := Html build: [ :html | 			     html head: 'Lorem ipsum'			   ]. self assert: salida = '<!!DOCTYPE html><html><head>Lorem ipsum</head></html>'	! !!DocumentTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 10:37'!test01DocumentoVacio	"Generación de un documento vacío"self assert: (Html build: [ :html | ]) = '<!!DOCTYPE html><html></html>'.! !!DocumentTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:26'!test03GeneracionAppend	"Generación solo-texto en el documento"	| salida |salida := Html build: [ :html | 			     html append: 'Lorem ipsum'			   ].self assert: salida = '<!!DOCTYPE html><html>Lorem ipsum</html>'.	! !!DocumentTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:26'!test05GeneracionConBloqueConWidth	"Generación solo-texto en el documento"	| salida |salida := Html build: [ :html | 			     html body with: [html h1:'Lorem ipsum']			   ].self assert: salida =  '<!!DOCTYPE html><html><body><h1>Lorem ipsum</h1></body></html>'.	! !