Object subclass: #Html	instanceVariableNames: 'stack'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 19:01'!pushChildNode: n	"comment stating purpose of message"	stack size > 0 ifTrue:[ 		|current|			current	:=	stack top.			current addChild: n.					].	stack push: n! !!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 19:01'!popNode	"comment stating purpose of message"	| |	 	stack size > 0 ifTrue: [ 		stack pop.	].! !!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 19:41'!contents	"comment stating purpose of message"	|t buffer|		buffer := WriteStream on: (String new).		stack size = 0 ifTrue: [ ^  buffer contents ].	[ stack size>1 ] whileTrue: [ stack pop].		t := stack pop. 	t writeTo:  buffer.	   ^ 	buffer contents.! !!Html methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 18:50'!initialize	"comment stating purpose of message"	| |stack := Stack new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Html class	instanceVariableNames: ''!!Html class methodsFor: 'construction' stamp: 'PLPPOLINOMIO 11/9/2015 18:03'!build: b	"comment stating purpose of message"	|html buffer|	html := HtmlNode new.   b value: html.		buffer := WriteStream on: ( String new ).	html writeTo: buffer.		^   buffer contents ! !Object subclass: #XmlNode	instanceVariableNames: 'tag childs'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:48'!writeTo: buffer	"comment stating purpose of message"	| |	self openTag:  buffer.	childs do: [  :child |		child writeTo: buffer.			].	self closeTag:  buffer.	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:29'!initialize	"comment stating purpose of message	node1 className endsWith: 'Node'	"	| t |	childs := OrderedCollection new.	self className endsWith: 'Node'.	t :=  String fromString: (self className).	tag :=  (t contractTo: (t size - 4)) translateToLowercase  ! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 12:39'!closeTag: ws	"Cierra un tag"	| |	ws nextPutAll: ('</', tag ,'>' ).! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 11:10'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll: ('<', tag ,'>' ).! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 18:01'!addChild: c	"comment stating purpose of message"	|  |	childs add:  c! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:55'!append:  inner	""	| node  |	node := 	TxtNode new. 	node setTxt: inner.	childs add: node	! !XmlNode subclass: #DivNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TableNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #HeadNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #BodyNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TdNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TitleNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TrNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #BNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #HtmlNode	instanceVariableNames: 'buffer'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!HtmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 18:25'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll: '<!!DOCTYPE html >' .	super openTag: ws. ! !XmlNode subclass: #ThNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #PNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TxtNode	instanceVariableNames: 'txt'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:57'!writeTo: buffer	"comment stating purpose of message"	| |	buffer nextPutAll: txt.! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:07'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll:  '' .! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:06'!closeTag: ws	"Cierra un tag"	| |	ws nextPutAll: '' .! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:29'!setTxt:  inner | |txt := inner! !