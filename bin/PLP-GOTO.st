<<<<<<< HEAD
Object subclass: #XmlNode	instanceVariableNames: 'tag childs allowed builder'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!XmlNode commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	allowed:		<Object>	builder:		<Object>	childs:		<Object>	tag:		<Object>    Implementation Points!!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 11:48'!with: aBlock	"comment stating purpose of message"^self setup: aBlock.! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 11:10'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll: ('<', tag ,'>' ).! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 13:15'!tagName	""	| |^ tag asLowercase .! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:48'!writeTo: buffer	"comment stating purpose of message"	| |	self openTag:  buffer.	childs do: [  :child |		child writeTo: buffer.			].	self closeTag:  buffer.	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/15/2015 18:50'!setup: param	|val|	param isString ifTrue:[self append: param.	builder popNode ].	param isBlock ifTrue:[		param argumentCount = 1 ifTrue:[val := param value: self].				param argumentCount = 0 ifTrue:[val := param value].		builder popNode .	].	(param isKindOf: XmlNode) ifTrue:[builder pushChildNode: param].! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 19:23'!initialize	""	| t |	childs := OrderedCollection new.	self className endsWith: 'Node'.	t := self className asLowercase .	tag :=  (t truncateTo: (t size - 4))  .! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 21:24'!append:  inner	| node  |	Transcript show: (' append ', self asString , ' : ', inner) .		node := 	TxtNode new. 	node setTxt: inner.		"childs add: node"	self addChild: node.	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 19:59'!builder: b	"comment stating purpose of message"builder:= b.! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 12:39'!closeTag: ws	"Cierra un tag"	| |	ws nextPutAll: ('</', tag ,'>' ).! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/15/2015 20:13'!addChild: c	"comment stating purpose of message"	(c isKindOf: XmlNode )ifFalse:[AssertionFailure  signal: 'MethodDictionary fault'].	(( self class) canHave:  c  )ifFalse:[		AssertionFailure  signal: 'MethodDictionary fault'	].	childs add:  c.	^self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!XmlNode class	instanceVariableNames: 'allowed builder'!!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/15/2015 19:35'!setCanHave: tags	allowed := tags.! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 13:19'!tagName	"comment stating purpose of message"	| t |	t := self name asLowercase.^	t truncateTo: (t size - 4).	! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 19:58'!new: b  |inst|		inst :=	super new.	inst builder: b. ^ inst.! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/15/2015 19:39'!canHave	^ allowed.	 ! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/15/2015 20:58'!canHave: obj	obj className =  'TxtNode' ifTrue:[		^  true.	].	^ false."	 AssertionFailure  signal:  (self name) , ' no permite al tag', (obj className)."	"AssertionFailure  signal:  (self name) , ' no permite al tag', (cls name)."	 ! !XmlNode subclass: #BNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #ThNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #HeadNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeadNode class	instanceVariableNames: ''!!HeadNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/16/2015 09:36'!canHave: obj	obj className =  'TitleNode' ifTrue:[		^  true.	].	obj className =  'TxtNode' ifTrue:[		^  true.	].	^ false.! !XmlNode subclass: #HtmlNode	instanceVariableNames: 'buffer'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HtmlNode class	instanceVariableNames: ''!!HtmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/16/2015 09:39'!canHave: obj	obj className =  'HeadNode' ifTrue:[		^  true.	].	obj className =  'BNode' ifTrue:[		^  true.	].	obj className =  'BodyNode' ifTrue:[		^  true.	].	obj className =  'PNode' ifTrue:[		^  true.	].	obj className =  'TxtNode' ifTrue:[		^  true.	].	obj className =  'BasicoNode' ifTrue:[		^  true.	].	obj className =  'Basico2Node' ifTrue:[		^  true.	].	obj className =  'ArticuloNode' ifTrue:[		^  true.	].	obj className =  'NotaNode' ifTrue:[		^  true.	].	obj className =  'H1Node' ifTrue:[		^  true.	].	obj className =  'H2Node' ifTrue:[		^  true.	].	obj className =  'BajadaNode' ifTrue:[		^  true.	].	^ false."	 AssertionFailure  signal:  (self name) , ' no permite al tag', (obj className)."! !XmlNode subclass: #TableNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TitleNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #BajadaNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #H2Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #RestringidoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #NotaNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NotaNode class	instanceVariableNames: ''!!NotaNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/15/2015 22:33'!canHave: obj	obj className =  'H2Node' ifTrue:[		^  true.	].	obj className =  'H1Node' ifTrue:[		^  true.	].	^ false.! !XmlNode subclass: #TdNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #DivNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TxtNode	instanceVariableNames: 'txt'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:57'!writeTo: buffer	"comment stating purpose of message"	| |	buffer nextPutAll: txt.! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:07'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll:  '' .! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:06'!closeTag: ws	"Cierra un tag"	| |	ws nextPutAll: '' .! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:29'!setTxt:  inner | |txt := inner! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TxtNode class	instanceVariableNames: 'txt'!XmlNode subclass: #BasicoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #H1Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TrNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #Basico2Node	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #AlgunoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #ArticuloNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ArticuloNode class	instanceVariableNames: ''!!ArticuloNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/15/2015 22:31'!canHave: obj	obj className =  'H2Node' ifTrue:[		^  true.	].	^ false.! !XmlNode subclass: #BodyNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BodyNode class	instanceVariableNames: ''!!BodyNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/16/2015 09:41'!canHave: obj	obj className =  'BasicoNode' ifTrue:[		^  true.	].	obj className =  'BNode' ifTrue:[		^  true.	].	obj className =  'H1Node' ifTrue:[		^  true.	].	obj className =  'H2Node' ifTrue:[		^  true.	].	obj className =  'Basico2Node' ifTrue:[		^  true.	].	obj className =  'ArticuloNode' ifTrue:[		^  true.	].	obj className =  'NotaNode' ifTrue:[		^  true.	].	obj className =  'BajadaNode' ifTrue:[		^  true.	].	obj className =  'PNode' ifTrue:[		^  true.	].	^ false."	 AssertionFailure  signal:  (self name) , ' no permite al tag', (obj className)."! !XmlNode subclass: #PNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PNode class	instanceVariableNames: ''!!PNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/16/2015 09:43'!canHave: obj	obj className =  'BNode' ifTrue:[		^  true.	].	obj className =  'TxtNode' ifTrue:[		^  true.	].	^ false.! !
=======
Object subclass: #XmlNode	instanceVariableNames: 'tag childs allowed builder'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!XmlNode commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	allowed:		<Object>	builder:		<Object>	childs:		<Object>	tag:		<Object>    Implementation Points!!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 11:48'!with: aBlock	"comment stating purpose of message"^self setup: aBlock.! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/14/2015 11:07'!doesNotUnderstand: aMessage 	|chl|					chl := aMessage sendTo: builder.		^chl.		"self addChild: chl."		"     t := aMessage selector asLegalSelector  asCamelCase,'Node*' .      exists := XmlNode selectSubclasses: [ :c |		t match: (c className) . 		].	chl := exists anyOne new.	aMessage hasArguments ifTrue:[ 		chl setup: (aMessage argument).	].	^chl.	 "	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:48'!writeTo: buffer	"comment stating purpose of message"	| |	self openTag:  buffer.	childs do: [  :child |		child writeTo: buffer.			].	self closeTag:  buffer.	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 12:39'!closeTag: ws	"Cierra un tag"	| |	ws nextPutAll: ('</', tag ,'>' ).! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 19:23'!initialize	""	| t |	childs := OrderedCollection new.	self className endsWith: 'Node'.	t := self className asLowercase .	tag :=  (t truncateTo: (t size - 4))  .! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 21:24'!append:  inner	| node  |	Transcript show: (' append ', self asString , ' : ', inner) .		node := 	TxtNode new. 	node setTxt: inner.		"childs add: node"	self addChild: node.	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 11:10'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll: ('<', tag ,'>' ).! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:57'!setup: param	|val tipo|		param isString ifTrue:[		self append: param.				^ self.	].	param isBlock ifTrue:[			val := param value.	].	tipo := param name.	(param isKindOf: XmlNode) ifTrue:[		"allowed includes: (Array new) putOn: tipo ifTrue: [ 			self error: 'Error al agregar tags invalidos.'.			]." 	  val := param.	builder pushChildNode: val.	].				! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 20:40'!builder: b	"comment stating purpose of message"	"allowed isNil ifFalse:[	allowed hasLiteral: (b tagName) ifFalse: [ self error: 'No cumple las restricciones.' ].]."	builder:= b.! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/12/2015 16:08'!addChild: c	"comment stating purpose of message"	childs add:  c.^self.! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 13:15'!tagName	""	| |^ tag asLowercase .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!XmlNode class	instanceVariableNames: 'allowed builder'!!XmlNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 20:40'!new: b  |inst|		inst :=	super new.	inst builder: b. ^ inst.! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 17:04'!canHave: tagsallowed := tags.! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 13:19'!tagName	"comment stating purpose of message"	| t |	t := self name asLowercase.^	t truncateTo: (t size - 4).	! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 20:25'!canHave	"comment stating purpose of message"	 allowed ifNil: [ 		allowed := Array new.	 ].^ allowed.	! !XmlNode subclass: #H1Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #BasicoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #NotaNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TitleNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TitleNode class	instanceVariableNames: ''!!TitleNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:35'!canHave	"Title solo permite tener texto plano"	 allowed := #('txt').	 ^ allowed.! !XmlNode subclass: #TxtNode	instanceVariableNames: 'txt'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:06'!closeTag: ws	"Cierra un tag"	| |	ws nextPutAll: '' .! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:29'!setTxt:  inner | |txt := inner! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:57'!writeTo: buffer	"comment stating purpose of message"	| |	buffer nextPutAll: txt.! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:07'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll:  '' .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TxtNode class	instanceVariableNames: 'txt'!XmlNode subclass: #AlgunoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #BodyNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BodyNode class	instanceVariableNames: ''!!BodyNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:33'!canHave	"Body solo permite tener table, p, b, div y texto plano dentro"	 allowed := #('table' 'p' 'b' 'div' 'txt').	 ^ allowed.! !XmlNode subclass: #BajadaNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #DivNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DivNode class	instanceVariableNames: ''!!DivNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:16'!canHave	"Div solo permite tener el mismo contenido que body"	 allowed := BodyNode canHave.	 ^ allowed.! !XmlNode subclass: #PNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PNode class	instanceVariableNames: ''!!PNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:34'!canHave	"p solo permite tener a b o texto plano"	 allowed := #('p' 'txt').	 ^ allowed.! !XmlNode subclass: #TdNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TdNode class	instanceVariableNames: ''!!TdNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:16'!canHave	"Td solo permite tener el mismo contenido que body"	 allowed := BodyNode canHave.	 ^ allowed.! !XmlNode subclass: #HeadNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeadNode class	instanceVariableNames: ''!!HeadNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:33'!canHave	"Head solo permite tener Title dentro"	 allowed := #('title').	 ^ allowed.	! !XmlNode subclass: #BNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BNode class	instanceVariableNames: ''!!BNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:33'!canHave	"b solo permite tener texto plano"	 allowed := #('txt').	 ^ allowed.! !XmlNode subclass: #ArticuloNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #RestringidoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TableNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TableNode class	instanceVariableNames: ''!!TableNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:34'!canHave	"Table solo permite tener tr y th dentro"	 allowed := #('tr' 'th').	 ^ allowed.	! !XmlNode subclass: #TrNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TrNode class	instanceVariableNames: ''!!TrNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:35'!canHave	"Tr solo permite tener td dentro"	 allowed := #('td').	 ^ allowed.! !XmlNode subclass: #HtmlNode	instanceVariableNames: 'buffer'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!HtmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 11:46'!head: txt	"comment stating purpose of message"	 ^ self head setup: txt.! !!HtmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 11:23'!head^HeadNode new. ! !!HtmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/12/2015 17:16'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	"ws nextPutAll: '<!!DOCTYPE html >' ."	super openTag: ws. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HtmlNode class	instanceVariableNames: ''!!HtmlNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:34'!canHave	"Html solo permite tener Head y Body dentro"	 allowed := #('head' 'body').	 ^ allowed.! !XmlNode subclass: #ThNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ThNode class	instanceVariableNames: ''!!ThNode class methodsFor: 'as yet unclassified' stamp: 'matiasgarcia 11/14/2015 19:35'!canHave	"Th solo permite tener td dentro"	 allowed := #('td').	 ^ allowed.! !XmlNode subclass: #H2Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #Basico2Node	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!
>>>>>>> c6b00c55d608208511303d4297e4a3679cba3fdc
