Object subclass: #XmlNode	instanceVariableNames: 'tag childs allowed builder'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!XmlNode commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	allowed:		<Object>	builder:		<Object>	childs:		<Object>	tag:		<Object>    Implementation Points!!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 11:48'!with: aBlock	"comment stating purpose of message"^self setup: aBlock.! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/14/2015 11:07'!doesNotUnderstand: aMessage 	|chl|					chl := aMessage sendTo: builder.		^chl.		"self addChild: chl."		"     t := aMessage selector asLegalSelector  asCamelCase,'Node*' .      exists := XmlNode selectSubclasses: [ :c |		t match: (c className) . 		].	chl := exists anyOne new.	aMessage hasArguments ifTrue:[ 		chl setup: (aMessage argument).	].	^chl.	 "	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 11:10'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll: ('<', tag ,'>' ).! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 13:15'!tagName	""	| |^ tag asLowercase .! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:48'!writeTo: buffer	"comment stating purpose of message"	| |	self openTag:  buffer.	childs do: [  :child |		child writeTo: buffer.			].	self closeTag:  buffer.	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/14/2015 12:17'!setup: param	|val|	param isString ifTrue:[		self append: param.						^ self.	].	param isBlock ifTrue:[			val := param value.	].	(param isKindOf: XmlNode) ifTrue:[	  val := param.	].			builder pushChildNode: val.	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 19:23'!initialize	""	| t |	childs := OrderedCollection new.	self className endsWith: 'Node'.	t := self className asLowercase .	tag :=  (t truncateTo: (t size - 4))  .! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 21:24'!append:  inner	| node  |	Transcript show: (' append ', self asString , ' : ', inner) .		node := 	TxtNode new. 	node setTxt: inner.		"childs add: node"	self addChild: node.	! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 19:59'!builder: b	"comment stating purpose of message"builder:= b.! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 12:39'!closeTag: ws	"Cierra un tag"	| |	ws nextPutAll: ('</', tag ,'>' ).! !!XmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/12/2015 16:08'!addChild: c	"comment stating purpose of message"	childs add:  c.^self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!XmlNode class	instanceVariableNames: 'allowed builder'!!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 13:19'!tagName	"comment stating purpose of message"	| t |	t := self name asLowercase.^	t truncateTo: (t size - 4).	! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 19:58'!new: b  |inst|		inst :=	super new.	inst builder: b. ^ inst.! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 17:04'!canHave: tagsallowed := tags.! !!XmlNode class methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 20:25'!canHave	"comment stating purpose of message"	 allowed ifNil: [ 		allowed := Array new.	 ].^ allowed.	! !XmlNode subclass: #BNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #ThNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #HeadNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #HtmlNode	instanceVariableNames: 'buffer'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!HtmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 11:46'!head: txt	"comment stating purpose of message"	 ^ self head setup: txt.! !!HtmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/12/2015 17:16'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	"ws nextPutAll: '<!!DOCTYPE html >' ."	super openTag: ws. ! !!HtmlNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/13/2015 11:23'!head^HeadNode new. ! !XmlNode subclass: #TableNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TitleNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #BajadaNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #H2Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #RestringidoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #NotaNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TdNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #DivNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TxtNode	instanceVariableNames: 'txt'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:57'!writeTo: buffer	"comment stating purpose of message"	| |	buffer nextPutAll: txt.! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:07'!openTag: ws	"Escribe al stream la apertura del tag correspondiente"	|  |	ws nextPutAll:  '' .! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:06'!closeTag: ws	"Cierra un tag"	| |	ws nextPutAll: '' .! !!TxtNode methodsFor: 'as yet unclassified' stamp: 'PLPPOLINOMIO 11/9/2015 17:29'!setTxt:  inner | |txt := inner! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TxtNode class	instanceVariableNames: 'txt'!XmlNode subclass: #BasicoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #H1Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #TrNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #Basico2Node	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #AlgunoNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #ArticuloNode	instanceVariableNames: ''	classVariableNames: 'allowed'	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #BodyNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!XmlNode subclass: #PNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-GOTO'!